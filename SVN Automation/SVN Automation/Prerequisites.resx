<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7+/gL8/PwW+vr6Lvj4+ED29vZO9PT0WvPy
        8mTx8fBs8PDvcu/v7nbv7u567+7ueu/u7nrv7+528O/vdPHx8G7y8vFm9PPzXvb19VL39/dE+fn5Mvv7
        +xz9/f0EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFVVVXKwsLDR9vb19/Hx8P/s7Ov/6Ofm/+Pi
        4f/e3dz/2tnY/9bV1P/T0dD/0M7N/83Lyv/Mysn/zcvK/8/NzP/S0M//1tTT/9nY1//d3Nv/4uHg/+bl
        5f/r6ur/8PDv//X19Pv5+fnb/Pz8bAAAAAAAAAAAAAAAAAAAAAYDAwPLAAAA/wAAAP85OTnL8vLyVPb2
        9mj08/N68fHwi+/v7pft7eyh7Ovqqerq6a/p6eiz6ejnteno57fp6Oe36ejos+rp6bHr6+qr7ezso+/u
        7pnx8PCP8/PyfvX19W74+PdY+vr6Pv39/RgAAAAAAAAAAAAAAAAAAAAAAAAAQCcmJv8AAAD/AAAA/wIC
        Av8gHx+fPDw8AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsR0VF/xwc
        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
        R4HapFb/wsGf/6rs9f+b0sf/6NWq/8Hj7P/J6PL/z+z0/67l8f+i5fH/r+Tn/6fn8v+d4vD/kdjr/4LK
        5f9GvuL/M7fU/7+NNf94p7T/ZqG//7ZyCf+bfjv/hIVg/9GLADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA155KXtqlV//Vtnz/svL5/57Z0v/z2qX/3enn/9bu9v/j9Pj/5vX5/8Xq9P+c3e7/ktns/4vT
        6f+ByuX/db7e/z+nzv80r9P/fbnO/22z1v9jp87/i4Zh/1iOrf+ehj//0IoAEgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADXn0wk2qRX/+CtZP/A6Nz/qu32/9rOkf/h7e7/5fL1//H5+//1+/z/5PT4/8/r
        9P+o2+z/hcnk/3G73P9mrs//LX2m/0Kp0f93weH/b7XY/2Wqz/9cnsb/U5K9/7GFJNcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZo1XT3qti/8zTsP+++v//q8mb/+/v5P/j8vX/7/f4//X4
        9//f8vf/zuv0/7zj7/+q2uv/i8Tf/1OSsP85dpb/X7XX/3nC4v9wt9r/Z6vR/12fx/9Uk77/rIUthwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANmiU2jcqF3/3rRx/8Dz8f+u7/b/jsLK/9/w
        9f/Y7/b/9fXx//Lv6P/Y5+j/z+De/8zUxf97qKX/bbPL/1eiwP+Azur/ecPj/3C42v9nrNH/Xp/I/26Q
        lPnJgQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2KFQBtqkVtncrmj/18WS/7/4
        /P+q7fb/jMXF/6fR3//z8Of/+e3g//Tix//mzIj/h7aq/43a5/98yN3/esrk/4PO6f95w+P/cLfa/2er
        0f9fn8X/mIdNkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2KFROtql
        WPneq2H/1saV/8D19v+9+f7/mOLx/5nPu/+pzJ7/ns6u/5Lg5f+k9v3/i9fl/4DK4v+K1/D/hMrh/3jB
        4f9vttn/ZqrQ/3GYodnEewAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA2KBQYNmjVf3cqF3/1ruC/8Tl2v+/8/L/u/n//7n5/v+y9/7/pe/5/5Pc7f+R2O3/j9vy/4fV
        7/9/yuj/dr7f/26y0/9kqM7pXqDIKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA155LWtegTvfZo1T/16pk/9erZf+81cP/seDe/6fl8P+i4e//muD0/5Pd
        8/+M2fH/hNHs/3vF5f91udf/ba7O22WpzygAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1JtEKseyesO/wZz/zqhi/9WcRf/FsXn/vrWF/8Wi
        W/+ytIz/ls/V/4jU7f+Ay+n/d8Hh+3G425dssdMOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCzgESvzsCpssWt8cOk
        X//JlDv/yY0r/8GQN/+voGD/kL2433zG5Y13v+AkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADNjioCy4snKMqIIkTHhRtMxYIPPsN+BBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAD4cAAf+D////gf/f/4D8Af/AcAB/4AAAP/AA
        AB/4AAAP/AAAB/4AAAf+AAAD/gAAA/4AAAP8AAAD/AAAA/wAAAP+AAAD/gAAA/4AAAP/AAAH/wAAB/+A
        AA//wAAf/+AAP//wAH///AH///////////8=
</value>
  </data>
</root>